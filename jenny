#!/usr/bin/env bash

# Clean DIST folder first
_DIST=$DIST clean

# Declare CONSTANTS
PUBLISH_PATTERN="^[0-9]{4}-[0-9]{2}-[0-9]{2}(.*)"
BLOG_LOCK=$(pwd)/.bloglock
SOURCE_TEMP_FILE=$(mktemp)
RENDER_TEMP_FILE=$(mktemp)
TAGS_TEMP_DIR=$(mktemp -d)
SHARE_DIR=/usr/local/share/jenny
T="[jenny]"

# Use project dir when symlinked
if [[ "$(uname -a)" == *"Darwin"* ]]; then
  SCRIPT_DIR=$(dirname "$(readlink $(which $BASH_SOURCE))")
else
  SCRIPT_DIR=$(dirname -- "$(readlink -e -- $BASH_SOURCE)")
fi

# Load library
source $SCRIPT_DIR/lib/helpers.sh
source $SCRIPT_DIR/lib/components.sh

# Load configuration on current dir
if source_blogrc; then
  echo "$T Sourced .blogrc"

  # Set defaults if not set in .blogrc
  [ -z $POSTS_PER_PAGE ] && POSTS_PER_PAGE=5
  [ -z $DIST ] && DIST=$PWD/.dist

  if is_installed; then
    # Installed, use installation path
    [ -z "$LAYOUT_DIR" ] && LAYOUT_DIR=$SHARE_DIR/layout
    [ -z "$MARKDOWN_COMMAND" ] && MARKDOWN_COMMAND="\$AWK -f \$SHARE_DIR/lib/md2html.awk"
  else
    # Not installed, use project path
    [ -z "$LAYOUT_DIR" ] && LAYOUT_DIR=$SCRIPT_DIR/share/layout
    [ -z "$MARKDOWN_COMMAND" ] && MARKDOWN_COMMAND="\$AWK -f \$SCRIPT_DIR/share/lib/md2html.awk"
  fi

  # Sets up directory
  touch $BLOG_LOCK
  mkdir -p $DIST/post
  mkdir -p $DIST/page

  if [ "$STATIC_DIRS" ]; then
    eval "cp -R $STATIC_DIRS $DIST"
  fi
else
  echo "$T Could not find .blogrc in this directory, exiting."
  exit 1
fi

# Checks if user is on macOS and checks for dependencies
# Also handles suppresion of this very message
if is_utils_installed; then
  echo -e "$T macOS users need gsed, gawk, and gdate, install them via: \n\n  brew install gawk gnu-sed coreutils\n"
  echo -e "$T If you installed them with --with-default-names, i.e. as sed and awk, then add the below to your .blogrc file to suppress this warning:\n\n  SUPPRESS_UTILS_WARN=1\n"
  exit 0
fi

# Use GNU utils if present
[ "$(which gsed)" ] && SED=$(which gsed) || SED=$(which sed)
[ "$(which gawk)" ] && AWK=$(which gawk) || AWK=$(which awk)
[ "$(which gdate)" ] && DATE=$(which gdate) || DATE=$(which date)

# Declare GlobalVariables
FullFileName=""
Slug=""
TotalPostCount=0
TotalPageCount=0
PostCount=0
PageCount=0
declare -a IndexList

while getopts ":d:p:l:" opt; do
  case $opt in
    d) DIST="$OPTARG"
    ;;
    p) POSTS_PER_PAGE="$OPTARG"
    ;;
    l) LAYOUT_DIR="$OPTARG"
    ;;
    \?) echo "Invalid option -$OPTARG" >&2
    ;;
  esac
done

begin () {

  echo "$T Working in $_DIST"

  # Grabbing the array argument
  local list=("$@")

  TotalPostCount=$(get_total_post_count $@)
  TotalPageCount=$(get_total_page_count $TotalPostCount $POSTS_PER_PAGE)

  # Reset variables
  PostCount=0
  PageCount=0

  # Loop through file list in expanded array
  for f in "${list[@]}"; do

    local title=$(get_title "$f")
    local slug=$(get_slug "$f")
    local destination="$_DIST/post/$slug.html"

    # Process source files if not working on tag index
    if [ -z "$_TAGNAME" ]; then

      if is_draft "$f"; then
        echo "$T • Draft: $(get_full_filename "$f") file..";
        continue
      fi

      if is_scheduled "$f"; then
        echo "$T • Scheduled: $(get_full_filename "$f") file..";
        continue
      fi

      # Grab the tags
      tags=$(get_tags "$f")
      for i in $tags; do
        echo "$f" >> "$TAGS_TEMP_DIR/$i"
      done

      # Grab file details
      local FullFileName=$(get_full_filename "$f")

      forRendering=false
      if is_new "$f"; then
        echo "$T ☶ $FullFileName"
        forRendering=true
      else
        # not new
        if is_changed "$f"; then
          echo "$T ↑ $FullFileName"
          forRendering=true
        else
          echo "$T - $FullFileName"
        fi
      fi

      local content_sum=$(cat "$f" | md5)
      local filename_sum=$(echo "$f" | md5)
      echo "$filename_sum $content_sum" >> $BLOG_LOCK

      # If page is for rendering
      if [ $forRendering=true ]; then

        echo "$T   /post/$slug.html"
        render "$f" "$destination" "$title" "$slug" "$tags"

      fi

    else
      echo "$T - " $(get_full_filename "$f")
    fi # Checks if working on tag index

    # Finally insert to the current index page
    _DIST=$_DIST _TAGNAME=$_TAGNAME index_insert "$f" "$slug" "$title"

  done

  echo
}


# Get files in current directory
fileList=(*.md)

# Start generation
_DIST=$DIST begin "${fileList[@]}"

# Now generate indexes for tags
OIFS="$IFS"
if compgen -G "$TAGS_TEMP_DIR/*" > /dev/null; then
  for i in `ls $TAGS_TEMP_DIR/*`; do
    tagName=$(basename $i)
    mkdir -p $DIST/tag/$tagName
    IFS=$'\r\n' GLOBIGNORE='*' command eval "fileList=(\$(cat $i))"
    _DIST=$DIST/tag/$tagName _TAGNAME=$tagName begin "${fileList[@]}"
  done
fi
IFS="$OIFS"

# Run the user defined hook
[ "$(type -t post_hook)" = function ] && post_hook

exit 0
